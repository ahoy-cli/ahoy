name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    # Note: Comprehensive testing is handled by the existing build_and_test.yml workflow
    # This release workflow assumes tests have passed on the main branch before tagging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache-dependency-path: v2/go.sum

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('v2/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Import GPG key (optional, for signing)
        id: import_gpg
        if: env.GPG_PRIVATE_KEY != ''
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Set GPG environment variables
        if: steps.import_gpg.outcome == 'success'
        run: |
          echo "GPG_FINGERPRINT=${{ steps.import_gpg.outputs.fingerprint }}" >> $GITHUB_ENV
          echo "GPG_PASSWORD=${{ secrets.GPG_PASSPHRASE }}" >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ env.GPG_FINGERPRINT }}
          GPG_PASSWORD: ${{ env.GPG_PASSWORD }}

      - name: Upload additional artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            dist/
          retention-days: 30

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          echo "Release ${{ github.ref_name }} completed successfully!"
          echo "Binaries and archives are available in the GitHub release."
          echo "Individual binaries are uploaded as separate assets."

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
          echo "üì¶ Archives and individual binaries are available in the release."
          echo "üîç Checksums and signatures (if configured) are included."

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed!"
          echo "Please check the workflow logs for details."
          exit 1