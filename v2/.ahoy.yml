ahoyapi: v2
commands:
  build:
    usage: Build ahoy with version information using Goreleaser.
    description: |
      Compiles the ahoy binary using Goreleaser with version
      information automatically embedded.

      This creates a snapshot build with proper version flags and
      optimization.
      The binary will be created in the dist directory.
    cmd: goreleaser build --config ../.goreleaser.yml --snapshot --clean --single-target

  build-all:
    usage: Build all supported architectures and OSes using Goreleaser.
    description: |
      Builds ahoy for all supported platforms (linux, darwin, windows) and
      architectures (amd64, arm64, arm) using Goreleaser configuration.

      Creates optimized binaries for distribution with proper naming and
      packaging.
    cmd: goreleaser build --config ../.goreleaser.yml --snapshot --clean

  install:
    usage: Install ahoy locally using go install.
    description: |
      Installs ahoy directly to your GOPATH/bin using go install.

      This is useful for development but doesn't include version information
      that Goreleaser builds provide.
    cmd: "go install"

  bats:
    usage: "Run the BATS bash testing command."
    description: |
      Executes the BATS (Bash Automated Testing System) test suite.

      This runs integration tests that verify ahoy's command-line behavior
      and functionality across different scenarios.
    cmd: |
      bats tests

  test:
    usage: Run automated tests.
    description: |
      Executes the complete test suite for ahoy including:
      - Go vet for code quality checks
      - Go unit tests with race detection
      - BATS integration tests for command-line behavior

      Stops on first failure and reports overall results.
    cmd: |
      set -euo pipefail
      TESTS=(
        'go vet'
        'go test -v -race'
        'bats tests'
      )
      for cmd in "${TESTS[@]}"; do
        printf "\n=== TEST: %s ===\n\n" "$cmd"
        eval "$cmd"
      done
      echo "All tests passed."

  gomod:
    usage: Manage Go module dependencies.
    description: |
      Performs complete Go module maintenance:
      - Tidies the go.mod file by removing unused dependencies
      - Downloads and vendors all dependencies
      - Verifies downloaded modules against checksums
    cmd: |
      go mod tidy
      go mod vendor
      go mod verify

  gofmt:
    usage: Format Go code according to standards.
    description: |
      Automatically formats all Go source files in the current directory
      according to Go's standard formatting rules.

      This ensures consistent code style across the project.
    cmd: gofmt -w *.go

  release:
    usage: Create a release using Goreleaser.
    description: |
      Creates a full release using Goreleaser including:
      - Building for all platforms and architectures
      - Generating checksums and SBOMs
      - Creating archives and signing artifacts

      Requires proper git tags and GPG setup for signing.
    cmd: goreleaser release --config ../.goreleaser.yml --clean

  cowsay:
    usage: A cow says something (fun demo command).
    description: |
      Displays a cow saying whatever message you provide.

      This is a demonstration command showing how ahoy can wrap
      external tools and pass arguments through.
    cmd: cowsay "$@"
