ahoyapi: v2
commands:
  build:
    usage: Build ahoy with a version automatically set.
    cmd: bash build.sh "$@"

  build-all:
    usage: Build all of the architecture and OSes that we support.
    cmd: |
      os_list=(darwin linux windows)
      arch=amd64
      for os in "${os_list[@]}"; do
        echo "Building ahoy-bin-$os-$arch .."
        env GOOS="$os" GOARCH="$arch" ahoy build -- -o "builds/ahoy-bin-$os-$arch"
        if [ $? -ne 0 ]; then
          "[Error]"
          exit 1
        fi
      done

  install:
    usage: Build ahoy using go install.
    cmd: "go install"

  bats:
    usage: "Run the bats bash testing command."
    cmd: |
      bats tests

  test:
    usage: Run automated tests.
    cmd: |
      FAIL=false
      TESTS=(
        'go vet'
        'go test -v -race '
        'bats tests'
      )
      for i in "${TESTS[@]}"; do
        printf "\n=== TEST: $i ===\n\n"
        $i
        if [ $? -ne 0 ]; then
          FAIL=true
        fi
      done
      printf "\n=== RESULT ===\n\n"
      # If any tests failed, then fail.
      if [ $FAIL == true ]; then
        echo "Some tests failed."
        exit 1
      else
        echo "All tests passed."
      fi

  gomod:
    usage: Fetch Go dependencies (go mod).
    cmd: |
      go mod tidy
      go mod vendor
      go mod verify

  godep:
    usage: Use "ahoy gomod" now to fetch Go dependencies (go mod).
    cmd: ahoy gomod

  gofmt:
    usage: Clean up go code per code standards.
    cmd: gofmt -w *.go

  docs-build:
    usage: Build the docs.
    cmd: cd docs && make html

  docs-deps:
    usage: Install the dependencies from requirements.txt.
    cmd: cd docs && pip install -r requirements.txt
